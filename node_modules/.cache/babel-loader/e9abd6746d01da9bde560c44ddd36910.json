{"ast":null,"code":"import _classCallCheck from \"/Users/deleoyelese/Documents/Git/personal_webpage/Dele-Oyelese.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/deleoyelese/Documents/Git/personal_webpage/Dele-Oyelese.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/deleoyelese/Documents/Git/personal_webpage/Dele-Oyelese.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/deleoyelese/Documents/Git/personal_webpage/Dele-Oyelese.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/deleoyelese/Documents/Git/personal_webpage/Dele-Oyelese.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport Phaser from '../lib/phaser.js';\nimport Carrot from '../game/Carrot.js'; // import bg_layer1 from '../../assets/bg_layer1.png'\n// import ground_grass from '../../assets/ground_grass.png'\n// import bunny1_stand from '../../assets/bunny1_stand.png'\n// import bunny1_jump from '../../assets/bunny1_jump.png'\n// import carrot from '../../assets/carrot.png'\n// import phaseJump1 from '../../assets/sfx/phaseJump1.ogg'\n\nvar Game = /*#__PURE__*/function (_Phaser$Scene) {\n  _inherits(Game, _Phaser$Scene);\n\n  /** @type {Phaser.Physics.Arcade.StaticGroup} */\n\n  /** @type {Phaser.Physics.Arcade.Sprite} */\n\n  /** @type {Phaser.Types.Input.Keyboard.CursorKeys} */\n\n  /** @type {Phaser.Physics.Arcade.Group} */\n  function Game() {\n    var _this;\n\n    _classCallCheck(this, Game);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Game).call(this, 'game'));\n    _this.carrotsCollected = 0;\n    return _this;\n  }\n\n  _createClass(Game, [{\n    key: \"init\",\n    value: function init() {\n      this.carrotsCollected = 0;\n    }\n  }, {\n    key: \"preload\",\n    value: function preload() {\n      // this.load.setBaseURL('../../assets')\n      //   Preload the assets using the load.image() method\n      //   this.load.image('background', require(bg_layer1))\n      //   this.load.image('platform', ground_grass)\n      //   this.load.image('bunny-stand', bunny1_stand)\n      //   this.load.image('bunny-jump', bunny1_jump)\n      //   this.load.image('carrot', carrot)\n      //   this.load.audio('jump', phaseJump1.ogg)\n      this.load.image('background', 'assets/bg_layer1.png');\n      this.load.image('platform', 'assets/ground_grass.png');\n      this.load.image('bunny-stand', 'assets/bunny1_stand.png');\n      this.load.image('bunny-jump', 'assets/bunny1_jump.png');\n      this.load.image('carrot', 'assets/carrot.png');\n      this.load.audio('jump', 'assets/sfx/phaseJump1.ogg');\n      this.cursors = this.input.keyboard.createCursorKeys();\n    }\n  }, {\n    key: \"create\",\n    value: function create() {\n      this.add.image(240, 320, 'background').setScrollFactor(1, 0);\n      this.platforms = this.physics.add.staticGroup(); // then create 5 platforms from the group\n\n      for (var i = 0; i < 5; ++i) {\n        var x = Phaser.Math.Between(80, 400);\n        var y = 150 * i;\n        /** @type {Phaser.Physics.Arcade.Sprite} */\n\n        var platform = this.platforms.create(x, y, 'platform');\n        platform.scale = 0.5;\n        /** @type {Phaser.Physics.Arcade.StaticBody} */\n\n        var body = platform.body;\n        body.updateFromGameObject();\n      }\n\n      this.player = this.physics.add.sprite(240, 320, 'bunny-stand').setScale(0.5);\n      this.physics.add.collider(this.platforms, this.player);\n      this.player.body.checkCollision.up = false;\n      this.player.body.checkCollision.left = false;\n      this.player.body.checkCollision.right = false;\n      this.cameras.main.startFollow(this.player);\n      this.cameras.main.setDeadzone(this.scale.width * 1.5);\n      this.carrots = this.physics.add.group({\n        classType: Carrot\n      });\n      this.physics.add.collider(this.platforms, this.carrots);\n      this.physics.add.overlap(this.player, this.carrots, this.handleCollectCarrot, undefined, this);\n      this.carrotsCollectedText = this.add.text(240, 10, 'Carrots: 0', {\n        color: '#000',\n        fontSize: 24\n      }).setScrollFactor(0).setOrigin(0.5, 0);\n    }\n  }, {\n    key: \"update\",\n    value: function update(t, dt) {\n      var _this2 = this;\n\n      if (!this.player) {\n        return;\n      }\n\n      this.platforms.children.iterate(function (child) {\n        /** @type {Phaser.Physics.Arcade.Sprite} */\n        var platform = child;\n        var scrollY = _this2.cameras.main.scrollY;\n\n        if (platform.y >= scrollY + 700) {\n          platform.y = scrollY - Phaser.Math.Between(50, 100);\n          platform.body.updateFromGameObject();\n\n          _this2.addCarrotAbove(platform);\n        }\n      });\n      var touchingDown = this.player.body.touching.down;\n\n      if (touchingDown) {\n        this.player.setVelocityY(-300);\n        this.player.setTexture('bunny-jump'); // this.sound.play('jump')\n      }\n\n      var vy = this.player.body.velocity.y;\n\n      if (vy > 0 && this.player.texture.key !== 'bunny-stand') {\n        this.player.setTexture('bunny-stand');\n      }\n\n      if (this.cursors.left.isDown && !touchingDown) {\n        this.player.setVelocityX(-200);\n      } else if (this.cursors.right.isDown && !touchingDown) {\n        this.player.setVelocityX(200);\n      } else {\n        this.player.setVelocityX(0);\n      }\n\n      this.horizontalWrap(this.player);\n      var bottomPlatform = this.findBottomMostPlatform();\n\n      if (this.player.y > bottomPlatform.y + 200) {\n        this.scene.start('game-over');\n      }\n    }\n    /**\n     * \n     * @param {Phaser.GameObjects.Sprite} sprite \n     */\n\n  }, {\n    key: \"horizontalWrap\",\n    value: function horizontalWrap(sprite) {\n      var halfWidth = sprite.displayWidth * 0.5;\n      var gameWidth = this.scale.width;\n\n      if (sprite.x < -halfWidth) {\n        sprite.x = gameWidth + halfWidth;\n      } else if (sprite.x > gameWidth + halfWidth) {\n        sprite.x = -halfWidth;\n      }\n    }\n    /**\n     * \n     * @param {Phaser.GameObjects.Sprite} sprite \n     */\n\n  }, {\n    key: \"addCarrotAbove\",\n    value: function addCarrotAbove(sprite) {\n      var y = sprite.y - sprite.displayHeight;\n      /** @type {Phaser.Physics.Arcade.Sprite} */\n\n      var carrot = this.carrots.get(sprite.x, y, 'carrot');\n      carrot.setActive(true);\n      carrot.setVisible(true);\n      this.add.existing(carrot);\n      carrot.body.setSize(carrot.width, carrot.height);\n      this.physics.world.enable(carrot);\n      return carrot;\n    }\n    /**\n     * \n     * @param {Phaser.Physics.Arcade.Sprite} player \n     * @param {Carrot} carrot \n     */\n\n  }, {\n    key: \"handleCollectCarrot\",\n    value: function handleCollectCarrot(player, carrot) {\n      this.carrots.killAndHide(carrot);\n      this.physics.world.disableBody(carrot.body);\n      this.carrotsCollected++;\n      this.carrotsCollectedText.text = \"Carrots: \".concat(this.carrotsCollected);\n    }\n  }, {\n    key: \"findBottomMostPlatform\",\n    value: function findBottomMostPlatform() {\n      var platforms = this.platforms.getChildren();\n      var bottomPlatform = platforms[0];\n\n      for (var i = 1; i < platforms.length; ++i) {\n        var platform = platforms[i]; // discard any platforms that are above current\n\n        if (platform.y < bottomPlatform.y) {\n          continue;\n        }\n\n        bottomPlatform = platform;\n      }\n\n      return bottomPlatform;\n    }\n  }]);\n\n  return Game;\n}(Phaser.Scene);\n\nexport { Game as default };","map":{"version":3,"names":["Phaser","Carrot","Game","carrotsCollected","load","image","audio","cursors","input","keyboard","createCursorKeys","add","setScrollFactor","platforms","physics","staticGroup","i","x","Math","Between","y","platform","create","scale","body","updateFromGameObject","player","sprite","setScale","collider","checkCollision","up","left","right","cameras","main","startFollow","setDeadzone","width","carrots","group","classType","overlap","handleCollectCarrot","undefined","carrotsCollectedText","text","color","fontSize","setOrigin","t","dt","children","iterate","child","scrollY","addCarrotAbove","touchingDown","touching","down","setVelocityY","setTexture","vy","velocity","texture","key","isDown","setVelocityX","horizontalWrap","bottomPlatform","findBottomMostPlatform","scene","start","halfWidth","displayWidth","gameWidth","displayHeight","carrot","get","setActive","setVisible","existing","setSize","height","world","enable","killAndHide","disableBody","getChildren","length","Scene"],"sources":["/Users/deleoyelese/Documents/Git/personal_webpage/Dele-Oyelese.github.io/src/components/bunny-jump/src/scenes/Game.js"],"sourcesContent":["import Phaser from '../lib/phaser.js'\n\nimport Carrot from '../game/Carrot.js'\n// import bg_layer1 from '../../assets/bg_layer1.png'\n// import ground_grass from '../../assets/ground_grass.png'\n// import bunny1_stand from '../../assets/bunny1_stand.png'\n// import bunny1_jump from '../../assets/bunny1_jump.png'\n// import carrot from '../../assets/carrot.png'\n// import phaseJump1 from '../../assets/sfx/phaseJump1.ogg'\n\nexport default class Game extends Phaser.Scene\n{\n\t/** @type {Phaser.Physics.Arcade.StaticGroup} */\n\tplatforms\n\n\t/** @type {Phaser.Physics.Arcade.Sprite} */\n\tplayer\n\n\t/** @type {Phaser.Types.Input.Keyboard.CursorKeys} */\n\tcursors\n\n\t/** @type {Phaser.Physics.Arcade.Group} */\n\tcarrots\n\n\tcarrotsCollected = 0\n\n\t/** @type {Phaser.GameObjects.Text} */\n\tcarrotsCollectedText\n\n\tconstructor()\n\t{\n\t\tsuper('game')\n\t}\n\n\tinit()\n\t{\n\t\tthis.carrotsCollected = 0\n\t}\n\n\tpreload()\n\t{\n\n\t\t// this.load.setBaseURL('../../assets')\n        //   Preload the assets using the load.image() method\n        //   this.load.image('background', require(bg_layer1))\n        //   this.load.image('platform', ground_grass)\n        //   this.load.image('bunny-stand', bunny1_stand)\n        //   this.load.image('bunny-jump', bunny1_jump)\n        //   this.load.image('carrot', carrot)\n        //   this.load.audio('jump', phaseJump1.ogg)\n        \n\t\tthis.load.image('background', 'assets/bg_layer1.png')\n\t\tthis.load.image('platform', 'assets/ground_grass.png')\n\t\tthis.load.image('bunny-stand', 'assets/bunny1_stand.png')\n\t\tthis.load.image('bunny-jump', 'assets/bunny1_jump.png')\n\t\tthis.load.image('carrot', 'assets/carrot.png')\n\t\t\n\n\t\tthis.load.audio('jump', 'assets/sfx/phaseJump1.ogg')\n\n\t\tthis.cursors = this.input.keyboard.createCursorKeys()\n\t}\n\n\tcreate()\n\t{\n\t\tthis.add.image(240, 320, 'background')\n\t\t\t.setScrollFactor(1, 0)\n\n\t\tthis.platforms = this.physics.add.staticGroup()\n\n\t\t// then create 5 platforms from the group\n\t\tfor (let i = 0; i < 5; ++i)\n\t\t{\n\t\t\tconst x = Phaser.Math.Between(80, 400)\n\t\t\tconst y = 150 * i\n\t\n\t\t\t/** @type {Phaser.Physics.Arcade.Sprite} */\n\t\t\tconst platform = this.platforms.create(x, y, 'platform')\n\t\t\tplatform.scale = 0.5\n\t\n\t\t\t/** @type {Phaser.Physics.Arcade.StaticBody} */\n\t\t\tconst body = platform.body\n\t\t\tbody.updateFromGameObject()\n\t\t}\n\n\t\tthis.player = this.physics.add.sprite(240, 320, 'bunny-stand')\n\t\t\t.setScale(0.5)\n\n\t\tthis.physics.add.collider(this.platforms, this.player)\n\t\t\n\t\tthis.player.body.checkCollision.up = false\n\t\tthis.player.body.checkCollision.left = false\n\t\tthis.player.body.checkCollision.right = false\n\n\t\tthis.cameras.main.startFollow(this.player)\n\t\tthis.cameras.main.setDeadzone(this.scale.width * 1.5)\n\n\t\tthis.carrots = this.physics.add.group({\n\t\t\tclassType: Carrot\n\t\t})\n\n\t\tthis.physics.add.collider(this.platforms, this.carrots)\n\t\tthis.physics.add.overlap(this.player, this.carrots, this.handleCollectCarrot, undefined, this)\n\n\t\tthis.carrotsCollectedText = this.add.text(240, 10, 'Carrots: 0', { color: '#000', fontSize: 24 })\n\t\t\t.setScrollFactor(0)\n\t\t\t.setOrigin(0.5, 0)\n\t}\n\n\tupdate(t, dt)\n\t{\n\t\tif (!this.player)\n\t\t{\n\t\t\treturn\n\t\t}\n\n\t\tthis.platforms.children.iterate(child => {\n\t\t\t/** @type {Phaser.Physics.Arcade.Sprite} */\n\t\t\tconst platform = child\n\n\t\t\tconst scrollY = this.cameras.main.scrollY\n\t\t\tif (platform.y >= scrollY + 700)\n\t\t\t{\n\t\t\t\tplatform.y = scrollY - Phaser.Math.Between(50, 100)\n\t\t\t\tplatform.body.updateFromGameObject()\n\t\t\t\tthis.addCarrotAbove(platform)\n\t\t\t}\n\t\t})\n\n\t\tconst touchingDown = this.player.body.touching.down\n\n\t\tif (touchingDown)\n\t\t{\n\t\t\tthis.player.setVelocityY(-300)\n\t\t\tthis.player.setTexture('bunny-jump')\n\t\t\t// this.sound.play('jump')\n\t\t}\n\n\t\tconst vy = this.player.body.velocity.y\n\t\tif (vy > 0 && this.player.texture.key !== 'bunny-stand')\n\t\t{\n\t\t\tthis.player.setTexture('bunny-stand')\n\t\t}\n\n\t\tif (this.cursors.left.isDown && !touchingDown)\n\t\t{\n\t\t\tthis.player.setVelocityX(-200)\n\t\t}\n\t\telse if (this.cursors.right.isDown && !touchingDown)\n\t\t{\n\t\t\tthis.player.setVelocityX(200)\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.player.setVelocityX(0)\n\t\t}\n\n\t\tthis.horizontalWrap(this.player)\n\n\t\tconst bottomPlatform = this.findBottomMostPlatform()\n\t\tif (this.player.y > bottomPlatform.y + 200)\n\t\t{\n\t\t\tthis.scene.start('game-over')\n\t\t}\n\t}\n\n\t/**\n\t * \n\t * @param {Phaser.GameObjects.Sprite} sprite \n\t */\n\thorizontalWrap(sprite)\n\t{\n\t\tconst halfWidth = sprite.displayWidth * 0.5\n\t\tconst gameWidth = this.scale.width\n\t\tif (sprite.x < -halfWidth)\n\t\t{\n\t\t\tsprite.x = gameWidth + halfWidth\n\t\t}\n\t\telse if (sprite.x > gameWidth + halfWidth)\n\t\t{\n\t\t\tsprite.x = -halfWidth\n\t\t}\n\t}\n\n\t/**\n\t * \n\t * @param {Phaser.GameObjects.Sprite} sprite \n\t */\n\taddCarrotAbove(sprite)\n\t{\n\t\tconst y = sprite.y - sprite.displayHeight\n\n\t\t/** @type {Phaser.Physics.Arcade.Sprite} */\n\t\tconst carrot = this.carrots.get(sprite.x, y, 'carrot')\n\n\t\tcarrot.setActive(true)\n\t\tcarrot.setVisible(true)\n\n\t\tthis.add.existing(carrot)\n\n\t\tcarrot.body.setSize(carrot.width, carrot.height)\n\n\t\tthis.physics.world.enable(carrot)\n\n\t\treturn carrot\n\t}\n\n\t/**\n\t * \n\t * @param {Phaser.Physics.Arcade.Sprite} player \n\t * @param {Carrot} carrot \n\t */\n\thandleCollectCarrot(player, carrot)\n\t{\n\t\tthis.carrots.killAndHide(carrot)\n\n\t\tthis.physics.world.disableBody(carrot.body)\n\n\t\tthis.carrotsCollected++\n\n\t\tthis.carrotsCollectedText.text = `Carrots: ${this.carrotsCollected}`\n\t}\n\n\tfindBottomMostPlatform()\n\t{\n\t\tconst platforms = this.platforms.getChildren()\n\t\tlet bottomPlatform = platforms[0]\n\n\t\tfor (let i = 1; i < platforms.length; ++i)\n\t\t{\n\t\t\tconst platform = platforms[i]\n\n\t\t\t// discard any platforms that are above current\n\t\t\tif (platform.y < bottomPlatform.y)\n\t\t\t{\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tbottomPlatform = platform\n\t\t}\n\n\t\treturn bottomPlatform\n\t}\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}